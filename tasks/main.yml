---
- name: Install GNUPG 2
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  become: yes
  apt:
    name: gnupg2
    state: latest

- name: Create Download Directory
  file:
    path: "{{ download_directory }}"
    state: directory
    mode: '0755'

- name: Download Nix Installer
  get_url:
    url: "{{ nix_installer_url }}/install"
    dest: "{{ nix_installer_download }}"

- name: Download Nix Installer Key
  get_url:
    url: "{{ nix_installer_url }}/install.asc"
    dest: "{{ nix_installer_download }}.asc"

#- name: Download Nix GPG Public Key
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  copy:
#    dest: "{{ download_directory }}/nix.gpg.txt"
#    content: |
#      {{ nix_gnupg_key }}

- name: Add Nix Key to GnuPG
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  changed_when: false
  command: "gpg2 --recv-keys {{ nix_gnupg_key }}"
  args:
    chdir: "{{ download_directory }}"

#- name: Add Nix Key to GnuPG
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
#  changed_when: false
#  command: "gpg2 --import {{ nix_installer_download }}.asc"
#  args:
#    chdir: "{{ download_directory }}"

- name: Verify Installer Download
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
  changed_when: false
  ignore_errors: yes
  command: "gpg2 --verify {{ nix_installer_download }}.asc {{ nix_installer_download }}"
  args:
    chdir: "{{ download_directory }}"

- name: Make Nix Installer Executable
  file:
    dest: "{{ nix_installer_download }}"
    mode: +x

- name: Install Nix
  become: yes
  script:
    cmd: "{{ nix_installer_download }}"
  args:
    creates: "{{ nix_install_location }}"

- name: Check that Nix is Installed
  stat:
    path: "{{ nix_install_location }}"
  register: nix_exists

- name: Print that Nix is installed successfully
  debug:
    msg: "Nix successfully installed"
  when: nix_exists.stat.exists and nix_exists.stat.isdir

- name: Print if Nix not installed
  debug:
    msg: "Nix not installed, run installer first."
  when: not nix_exists.stat.exists

#- name: Base-Nix | Installs gcc | nix
#  command:
#    cmd: "{{ nix_install }} nixpkgs.gcc"
#    creates: "{{ nix_bin }}/gcc"

#- name: Base-Nix | Installs Binutils | nix
#  command:
#    cmd: "{{ nix_install }} nixpkgs.binutils"
#    creates: "{{ nix_bin }}/ar"
